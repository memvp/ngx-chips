{
  "version": 3,
  "file": "ngx-chips.umd.min.js",
  "sources": [
    "ng://ngx-chips/node_modules/tslib/tslib.es6.js",
    "ng://ngx-chips/out/core/pipes/highlight.pipe.ts",
    "ng://ngx-chips/out/core/constants/index.ts",
    "ng://ngx-chips/out/core/providers/drag-provider.ts",
    "ng://ngx-chips/out/defaults.ts",
    "ng://ngx-chips/out/core/providers/options-provider.ts",
    "ng://ngx-chips/out/core/accessor.ts",
    "ng://ngx-chips/out/core/helpers/listen.ts",
    "ng://ngx-chips/out/components/tag-input-form/tag-input-form.component.ts",
    "ng://ngx-chips/out/components/dropdown/tag-input-dropdown.component.ts",
    "ng://ngx-chips/out/components/tag/tag-ripple.component.ts",
    "ng://ngx-chips/out/components/tag/tag.component.ts",
    "ng://ngx-chips/out/components/tag-input/animations.ts",
    "ng://ngx-chips/out/components/tag-input/tag-input.ts",
    "ng://ngx-chips/out/components/icon/icon.ts",
    "ng://ngx-chips/out/tag-input.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import {Pipe, PipeTransform} from '@angular/core';\n\nconst escape = s => s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n@Pipe({\n    name: 'highlight'\n})\nexport class HighlightPipe implements PipeTransform {\n    /**\n     * @name transform\n     * @param value {string}\n     * @param arg {string}\n     */\n    public transform(value: string, arg: string): string {\n        if (!arg.trim()) {\n            return value;\n        }\n\n        try {\n            const regex = new RegExp(`(${escape(arg)})`, 'i');\n            return value.replace(regex, '<b>$1</b>');\n        } catch (e) {\n            return value;\n        }\n    }\n}\n",
    "/*\n** constants and default values for <tag-input>\n */\n\nexport const PLACEHOLDER = '+ Tag';\nexport const SECONDARY_PLACEHOLDER = 'Enter a new tag';\nexport const KEYDOWN = 'keydown';\nexport const KEYUP = 'keyup';\nexport const FOCUS = 'focus';\nexport const MAX_ITEMS_WARNING = 'The number of items specified was greater than the property max-items.';\n\nexport const ACTIONS_KEYS = {\n    DELETE: 'DELETE',\n    SWITCH_PREV: 'SWITCH_PREV',\n    SWITCH_NEXT: 'SWITCH_NEXT',\n    TAB: 'TAB'\n};\n\nexport const KEY_PRESS_ACTIONS = {\n    8: ACTIONS_KEYS.DELETE,\n    37: ACTIONS_KEYS.SWITCH_PREV,\n    39: ACTIONS_KEYS.SWITCH_NEXT,\n    9: ACTIONS_KEYS.TAB\n};\n\nexport const DRAG_AND_DROP_KEY = 'Text';\nexport const NEXT = 'NEXT';\nexport const PREV = 'PREV';\n\n",
    "import { TagInputComponent } from '../../components/tag-input/tag-input';\nimport { TagModel } from '../accessor';\n\nimport { Injectable } from '@angular/core';\n\nexport declare interface DraggedTag {\n    index: number;\n    tag: TagModel;\n    zone: string;\n}\n\nimport { DRAG_AND_DROP_KEY } from '../../core/constants';\n\nexport declare interface State {\n    dragging: boolean,\n    dropping: boolean,\n    index: number | undefined\n}\n\nexport declare type StateProperty = keyof State;\n\n@Injectable()\nexport class DragProvider {\n    public sender: TagInputComponent;\n    public receiver: TagInputComponent;\n\n    public state: State = {\n        dragging: false,\n        dropping: false,\n        index: undefined\n    };\n\n    /**\n     * @name setDraggedItem\n     * @param event\n     * @param tag\n     */\n    public setDraggedItem(event: DragEvent, tag: DraggedTag): void {\n        event.dataTransfer.setData(DRAG_AND_DROP_KEY, JSON.stringify(tag));\n    }\n\n    /**\n     * @name getDraggedItem\n     * @param event\n     */\n    public getDraggedItem(event: DragEvent): DraggedTag {\n        const data = event.dataTransfer.getData(DRAG_AND_DROP_KEY);\n\n        return JSON.parse(data) as DraggedTag;\n    }\n\n    /**\n     * @name setSender\n     * @param sender\n     */\n    public setSender(sender: TagInputComponent): void {\n        this.sender = sender;\n    }\n\n    /**\n     * @name setReceiver\n     * @param receiver\n     */\n    public setReceiver(receiver: TagInputComponent): void {\n        this.receiver = receiver;\n    }\n\n    /**\n     * @name onTagDropped\n     * @param tag\n     * @param indexDragged\n     * @param indexDropped\n     */\n    public onTagDropped(tag: TagModel, indexDragged: number, indexDropped?: number): void {\n        this.onDragEnd();\n\n        this.sender.onRemoveRequested(tag, indexDragged);\n        this.receiver.onAddingRequested(false, tag, indexDropped);\n    }\n\n    /**\n     * @name setState\n     * @param state\n     */\n    public setState(state: {[K in StateProperty]?: State[K]}): void {\n        this.state = {...this.state, ...state};\n    }\n\n    /**\n     * @name getState\n     * @param key\n     */\n    public getState(key?: StateProperty): State | State[StateProperty] {\n        return key ? this.state[key] : this.state;\n    }\n\n    /**\n     * @name onDragEnd\n     */\n    public onDragEnd(): void {\n        this.setState({\n            dragging: false,\n            dropping: false,\n            index: undefined\n        });\n    }\n}\n",
    "import { Observable } from 'rxjs';\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\n\nimport { SECONDARY_PLACEHOLDER, PLACEHOLDER } from './core/constants/index';\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagModel } from './core/accessor';\n\nexport interface TagInputOptions {\n    separatorKeys: string[];\n    separatorKeyCodes: number[];\n    maxItems: number;\n    placeholder: string;\n    secondaryPlaceholder: string;\n    validators: ValidatorFn[];\n    asyncValidators: AsyncValidatorFn[];\n    onlyFromAutocomplete: boolean;\n    errorMessages: { [key: string]: string; };\n    theme: string;\n    onTextChangeDebounce: number;\n    inputId: string | null;\n    inputClass: string;\n    clearOnBlur: boolean;\n    hideForm: boolean;\n    addOnBlur: boolean;\n    addOnPaste: boolean;\n    pasteSplitPattern: string | RegExp;\n    blinkIfDupe: boolean;\n    removable: boolean;\n    editable: boolean;\n    allowDupes: boolean;\n    modelAsStrings: boolean;\n    trimTags: boolean;\n    ripple: boolean;\n    tabIndex: string;\n    disable: boolean;\n    dragZone: string;\n    onRemoving?: (tag: TagModel) => Observable<TagModel>;\n    onAdding?: (tag: TagModel) => Observable<TagModel>;\n    displayBy: string;\n    identifyBy: string;\n    animationDuration: {\n        enter: string,\n        leave: string\n    };\n}\n\nexport interface TagInputDropdownOptions {\n    displayBy: string;\n    identifyBy: string;\n    appendToBody: boolean;\n    offset: string;\n    focusFirstElement: boolean;\n    showDropdownIfEmpty: boolean;\n    minimumTextLength: number;\n    limitItemsTo: number;\n    keepOpen: boolean;\n    zIndex: number;\n    dynamicUpdate: boolean;\n    matchingFn: (value: string, target: TagModel) => boolean;\n}\n\nexport const defaults = {\n    tagInput: <TagInputOptions>{\n        separatorKeys: [],\n        separatorKeyCodes: [],\n        maxItems: Infinity,\n        placeholder: PLACEHOLDER,\n        secondaryPlaceholder: SECONDARY_PLACEHOLDER,\n        validators: [],\n        asyncValidators: [],\n        onlyFromAutocomplete: false,\n        errorMessages: {},\n        theme: '',\n        onTextChangeDebounce: 250,\n        inputId: null,\n        inputClass: '',\n        clearOnBlur: false,\n        hideForm: false,\n        addOnBlur: false,\n        addOnPaste: false,\n        pasteSplitPattern: ',',\n        blinkIfDupe: true,\n        removable: true,\n        editable: false,\n        allowDupes: false,\n        modelAsStrings: false,\n        trimTags: true,\n        ripple: true,\n        tabIndex: '',\n        disable: false,\n        dragZone: '',\n        onRemoving: undefined,\n        onAdding: undefined,\n        displayBy: 'display',\n        identifyBy: 'value',\n        animationDuration: {\n            enter: '250ms',\n            leave: '150ms'\n        }\n    },\n    dropdown: <TagInputDropdownOptions>{\n        displayBy: 'display',\n        identifyBy: 'value',\n        appendToBody: true,\n        offset: '50 0',\n        focusFirstElement: false,\n        showDropdownIfEmpty: false,\n        minimumTextLength: 1,\n        limitItemsTo: Infinity,\n        keepOpen: true,\n        dynamicUpdate: true,\n        zIndex: 1000,\n        matchingFn\n    }\n};\n\n/**\n * @name matchingFn\n * @param this\n * @param value\n * @param target\n */\nfunction matchingFn(this: TagInputDropdown, value: string, target: TagModel): boolean {\n    const targetValue = target[this.displayBy].toString();\n\n    return targetValue && targetValue\n        .toLowerCase()\n        .indexOf(value.toLowerCase()) >= 0;\n}\n",
    "import { defaults, TagInputOptions, TagInputDropdownOptions } from '../../defaults';\n\nexport type Options = {\n    tagInput?: {\n        [P in keyof TagInputOptions]?: TagInputOptions[P];\n    };\n    dropdown?: {\n        [P in keyof TagInputDropdownOptions]?: TagInputDropdownOptions[P];\n    }\n}\n\nexport class OptionsProvider {\n    public static defaults = defaults;\n\n    public setOptions(options: Options): void {\n        OptionsProvider.defaults.tagInput = {...defaults.tagInput, ...options.tagInput};\n        OptionsProvider.defaults.dropdown = {...defaults.dropdown, ...options.dropdown};\n    }\n}\n\nexport { TagInputDropdownOptions, TagInputOptions };",
    "import { ControlValueAccessor } from '@angular/forms';\nimport { Input } from '@angular/core';\nimport { OptionsProvider } from './providers/options-provider';\n\nexport class TagModelClass {\n    [key: string]: any;\n}\n\nexport type TagModel = string | TagModelClass;\n\nexport function isObject(obj: any): boolean {\n    return obj === Object(obj);\n}\n\nexport class TagInputAccessor implements ControlValueAccessor {\n    private _items: TagModel[] = [];\n    private _onTouchedCallback: () => void;\n    private _onChangeCallback: (items: TagModel[]) => void;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy: string = OptionsProvider.defaults.tagInput.displayBy;\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy: string = OptionsProvider.defaults.tagInput.identifyBy;\n\n    public get items(): TagModel[] {\n        return this._items;\n    };\n\n    public set items(items: TagModel[]) {\n        this._items = items;\n        this._onChangeCallback(this._items);\n    }\n\n    public onTouched() {\n        this._onTouchedCallback();\n    }\n\n    public writeValue(items: any[]) {\n        this._items = items || [];\n    }\n\n    public registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    public registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @name getItemValue\n     * @param item\n     */\n    public getItemValue(item: TagModel): string {\n        return isObject(item) ? item[this.identifyBy] : item;\n    }\n\n    /**\n     * @name getItemDisplay\n     * @param item\n     */\n    public getItemDisplay(item: TagModel): string {\n        return isObject(item) ? item[this.displayBy] : item;\n    }\n\n    /**\n     * @name getItemsWithout\n     * @param index\n     */\n    protected getItemsWithout(index: number): TagModel[] {\n        return this.items.filter((item, position) => position !== index);\n    }\n}\n",
    "\n/**\n * @name listen\n * @param listenerType\n * @param action\n * @param condition\n */\nexport function listen(listenerType: string, action: () => any, condition = true): void {\n    // if the event provided does not exist, throw an error\n    if (!this.listeners.hasOwnProperty(listenerType)) {\n        throw new Error('The event entered may be wrong');\n    }\n\n    // if a condition is present and is false, exit early\n    if (!condition) {\n        return;\n    }\n\n    // fire listener\n    this.listeners[listenerType].push(action);\n}\n",
    "import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\nimport {AsyncValidatorFn, FormControl, FormGroup, ValidatorFn} from '@angular/forms';\n\n@Component({\n    selector: 'tag-input-form',\n    styles: [`.dark tag:focus{-webkit-box-shadow:0 0 0 1px #323232;box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info input{border:none;-webkit-box-shadow:none;box-shadow:none;outline:0;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info input:focus{border:none;-webkit-box-shadow:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused{-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.4);box-shadow:inset 0 1px 1px rgba(0,0,0,.4);border:1px solid #ccc}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid{-webkit-box-shadow:inset 0 1px 1px #d9534f;box-shadow:inset 0 1px 1px #d9534f}.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;-webkit-transition:all .25s;transition:all .25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #2196f3}.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading{border:none}.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.ng2-tag-input form{margin:.1em 0}.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.minimal.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.dark.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.bootstrap.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.bootstrap3-info.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;padding:4px;cursor:text;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);border-radius:4px}.bootstrap3-info.ng2-tag-input:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid{border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input form{margin:.1em 0}.bootstrap3-info.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.error-message{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap .error-message{color:#d9534f}.ng2-tag-input__text-input{display:inline;vertical-align:middle;border:none;padding:0 .5rem;height:38px;font-size:1em;font-family:Roboto,\"Helvetica Neue\",sans-serif}.ng2-tag-input__text-input:focus{outline:0}.ng2-tag-input__text-input[disabled=true]{opacity:.5;background:#fff}`],\n    template: `<!-- form -->\n<form (ngSubmit)=\"submit($event)\" [formGroup]=\"form\">\n    <input #input\n\n           type=\"text\"\n           class=\"ng2-tag-input__text-input\"\n           autocomplete=\"off\"\n           tabindex=\"{{ disabled ? -1 : tabindex ? tabindex : 0 }}\"\n           minlength=\"1\"\n           formControlName=\"item\"\n\n           [ngClass]=\"inputClass\"\n           [attr.id]=\"inputId\"\n           [attr.placeholder]=\"placeholder\"\n           [attr.aria-label]=\"placeholder\"\n           [attr.tabindex]=\"tabindex\"\n           [attr.disabled]=\"disabled ? disabled : null\"\n\n           (focus)=\"onFocus.emit($event)\"\n           (blur)=\"onBlur.emit($event)\"\n           (keydown)=\"onKeyDown($event)\"\n           (keyup)=\"onKeyUp($event)\"\n    />\n</form>\n`\n})\nexport class TagInputForm implements OnInit, OnChanges {\n    /**\n     * @name onSubmit\n     */\n    @Output() public onSubmit: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onBlur\n     */\n    @Output() public onBlur: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onFocus\n     */\n    @Output() public onFocus: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeyup\n     */\n    @Output() public onKeyup: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name onKeydown\n     */\n    @Output() public onKeydown: EventEmitter<any> = new EventEmitter();\n\n    /**\n     * @name inputTextChange\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    // inputs\n\n    /**\n     * @name placeholder\n     */\n    @Input() public placeholder: string;\n\n    /**\n     * @name validators\n     */\n    @Input() public validators: ValidatorFn[] = [];\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = [];\n\n    /**\n     * @name inputId\n     */\n    @Input() public inputId: string;\n\n    /**\n     * @name inputClass\n     */\n    @Input() public inputClass: string;\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    @Input() public tabindex = '';\n\n    /**\n     * @name disabled\n     */\n    @Input() public disabled = false;\n\n    /**\n     * @name input\n     */\n    @ViewChild('input') public input;\n\n    /**\n     * @name form\n     */\n    public form: FormGroup;\n\n    /**\n     * @name inputText\n     */\n    @Input()\n    public get inputText(): string {\n        return this.item.value;\n    }\n\n    /**\n     * @name inputText\n     * @param text {string}\n     */\n    public set inputText(text: string) {\n        this.item.setValue(text);\n\n        this.inputTextChange.emit(text);\n    }\n\n    private readonly item: FormControl = new FormControl({value: '', disabled: this.disabled});\n\n    ngOnInit() {\n        this.item.setValidators(this.validators);\n        this.item.setAsyncValidators(this.asyncValidators);\n\n        // creating form\n        this.form = new FormGroup({\n            item: this.item\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.disabled && !changes.disabled.firstChange) {\n            if (changes.disabled.currentValue) {\n                this.form.controls['item'].disable();\n            } else {\n                this.form.controls['item'].enable();\n            }\n        }\n    }\n\n    /**\n     * @name value\n     */\n    public get value(): FormControl {\n        return this.form.get('item') as FormControl;\n    }\n\n    /**\n     * @name isInputFocused\n     */\n    public isInputFocused(): boolean {\n        return document.activeElement === this.input.nativeElement;\n    }\n\n    /**\n     * @name getErrorMessages\n     * @param messages\n     */\n    public getErrorMessages(messages: { [key: string]: string }): string[] {\n        return Object.keys(messages)\n            .filter(err => this.value.hasError(err))\n            .map(err => messages[err]);\n    }\n\n    /**\n     * @name hasErrors\n     */\n    public hasErrors(): boolean {\n        const {dirty, value, valid} = this.form;\n        return dirty && value.item && !valid;\n    }\n\n    /**\n     * @name focus\n     */\n    public focus(): void {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * @name blur\n     */\n    public blur(): void {\n        this.input.nativeElement.blur();\n    }\n\n    /**\n     * @name getElementPosition\n     */\n    public getElementPosition(): ClientRect {\n        return this.input.nativeElement.getBoundingClientRect();\n    }\n\n    /**\n     * - removes input from the component\n     * @name destroy\n     */\n    public destroy(): void {\n        const input = this.input.nativeElement;\n        input.parentElement.removeChild(input);\n    }\n\n    /**\n     * @name onKeyDown\n     * @param $event\n     */\n    public onKeyDown($event) {\n        this.inputText = this.value.value;\n        if ($event.key === 'Enter') {\n            this.submit($event);\n\n            this.inputText = '';\n        }\n        return this.onKeydown.emit($event);\n    }\n\n    /**\n     * @name onKeyUp\n     * @param $event\n     */\n    public onKeyUp($event) {\n        this.inputText = this.value.value;\n        return this.onKeyup.emit($event);\n    }\n\n    /**\n     * @name submit\n     */\n    public submit($event: any): void {\n        $event.preventDefault();\n        if (this.form.valid) {\n            this.onSubmit.emit($event);\n        }\n    }\n}\n",
    "import {\n    Component,\n    ContentChildren,\n    EventEmitter,\n    forwardRef,\n    HostListener,\n    Injector,\n    Input,\n    QueryList,\n    TemplateRef,\n    Type,\n    ViewChild,\n} from '@angular/core';\n\n// rx\nimport { Observable } from 'rxjs';\nimport { map, filter, first, debounceTime } from 'rxjs/operators';\n\nimport { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';\nimport { OptionsProvider } from '../../core/providers/options-provider';\nimport { TagInputComponent } from '../tag-input/tag-input';\nimport { TagInputDropdownOptions } from '../../defaults';\nimport { TagModel } from '../../core/accessor';\n\nconst defaults: Type<TagInputDropdownOptions> = forwardRef(() => OptionsProvider.defaults.dropdown);\n\n@Component({\n    selector: 'tag-input-dropdown',\n    template: `<ng2-dropdown [dynamicUpdate]=\"dynamicUpdate\">\n    <ng2-dropdown-menu [focusFirstElement]=\"focusFirstElement\"\n                       [zIndex]=\"zIndex\"\n                       [appendToBody]=\"appendToBody\"\n                       [offset]=\"offset\">\n        <ng2-menu-item *ngFor=\"let item of items; let index = index; let last = last\"\n                       [value]=\"item\"\n                       [ngSwitch]=\"!!templates.length\">\n\n            <span *ngSwitchCase=\"false\"\n                  [innerHTML]=\"item[displayBy] | highlight : tagInput.inputForm.value.value\">\n            </span>\n\n            <ng-template *ngSwitchDefault\n                      [ngTemplateOutlet]=\"templates.first\"\n                      [ngTemplateOutletContext]=\"{ item: item, index: index, last: last }\">\n            </ng-template>\n        </ng2-menu-item>\n    </ng2-dropdown-menu>\n</ng2-dropdown>\n`\n})\nexport class TagInputDropdown {\n    /**\n     * @name dropdown\n     */\n    @ViewChild(Ng2Dropdown) public dropdown: Ng2Dropdown;\n\n    /**\n     * @name menuTemplate\n     * @desc reference to the template if provided by the user\n     */\n    @ContentChildren(TemplateRef) public templates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @name offset\n     */\n    @Input() public offset: string = new defaults().offset;\n\n    /**\n     * @name focusFirstElement\n     */\n    @Input() public focusFirstElement = new defaults().focusFirstElement;\n\n    /**\n     * - show autocomplete dropdown if the value of input is empty\n     * @name showDropdownIfEmpty\n     */\n    @Input() public showDropdownIfEmpty = new defaults().showDropdownIfEmpty;\n\n    /**\n     * @description observable passed as input which populates the autocomplete items\n     * @name autocompleteObservable\n     */\n    @Input() public autocompleteObservable: (text: string) => Observable<any>;\n\n    /**\n     * - desc minimum text length in order to display the autocomplete dropdown\n     * @name minimumTextLength\n     */\n    @Input() public minimumTextLength = new defaults().minimumTextLength;\n\n    /**\n     * - number of items to display in the autocomplete dropdown\n     * @name limitItemsTo\n     */\n    @Input() public limitItemsTo: number = new defaults().limitItemsTo;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy = new defaults().displayBy;\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy = new defaults().identifyBy;\n\n    /**\n     * @description a function a developer can use to implement custom matching for the autocomplete\n     * @name matchingFn\n     */\n    @Input() public matchingFn: (value: string, target: TagModel) => boolean = new defaults().matchingFn;\n\n    /**\n     * @name appendToBody\n     */\n    @Input() public appendToBody = new defaults().appendToBody;\n\n    /**\n     * @name keepOpen\n     * @description option to leave dropdown open when adding a new item\n     */\n    @Input() public keepOpen = new defaults().keepOpen;\n\n    /**\n     * @name dynamicUpdate\n     */\n    @Input() public dynamicUpdate = new defaults().dynamicUpdate;\n\n    /**\n    * @name zIndex\n     */\n    @Input() public zIndex = new defaults().zIndex;\n\n    /**\n     * list of items that match the current value of the input (for autocomplete)\n     * @name items\n     */\n    public items: TagModel[] = [];\n\n    /**\n     * @name tagInput\n     */\n    public tagInput: TagInputComponent = this.injector.get(TagInputComponent);\n\n    /**\n     * @name _autocompleteItems\n     */\n    private _autocompleteItems: TagModel[] = [];\n\n    /**\n     * @name autocompleteItems\n     * @param items\n     */\n    public set autocompleteItems(items: TagModel[]) {\n        this._autocompleteItems = items;\n    }\n\n    /**\n     * @name autocompleteItems\n     * @desc array of items that will populate the autocomplete\n     */\n    @Input() public get autocompleteItems(): TagModel[] {\n        const items = this._autocompleteItems;\n\n        if (!items) {\n            return [];\n        }\n\n        return items.map((item: TagModel) => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n    }\n\n    constructor(private readonly injector: Injector) {}\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        this.onItemClicked().subscribe((item: Ng2MenuItem) => {\n            this.requestAdding(item);\n        });\n\n        // reset itemsMatching array when the dropdown is hidden\n        this.onHide().subscribe(this.resetItems);\n\n        const DEBOUNCE_TIME = 200;\n        const KEEP_OPEN = this.keepOpen;\n\n        this.tagInput\n            .onTextChange\n            .asObservable()\n            .pipe(\n                debounceTime(DEBOUNCE_TIME),\n                filter((value: string) => {\n                    if (KEEP_OPEN === false) {\n                        return value.length > 0;\n                    }\n\n                    return true;\n                })\n            )\n            .subscribe(this.show);\n    }\n\n    /**\n     * @name updatePosition\n     */\n    public updatePosition(): void {\n        const position = this.tagInput.inputForm.getElementPosition();\n\n        this.dropdown.menu.updatePosition(position, this.dynamicUpdate);\n    }\n\n    /**\n     * @name isVisible\n     */\n    public get isVisible(): boolean {\n        return this.dropdown.menu.state.menuState.isVisible;\n    }\n\n    /**\n     * @name onHide\n     */\n    public onHide(): EventEmitter<Ng2Dropdown> {\n        return this.dropdown.onHide;\n    }\n\n    /**\n     * @name onItemClicked\n     */\n    public onItemClicked(): EventEmitter<string> {\n        return this.dropdown.onItemClicked;\n    }\n\n    /**\n     * @name selectedItem\n     */\n    public get selectedItem(): Ng2MenuItem {\n        return this.dropdown.menu.state.dropdownState.selectedItem;\n    }\n\n    /**\n     * @name state\n     */\n    public get state(): any {\n        return this.dropdown.menu.state;\n    }\n\n    /**\n     *\n     * @name show\n     */\n    public show = (): void => {\n        const maxItemsReached = this.tagInput.items.length === this.tagInput.maxItems;\n        const value = this.getFormValue();\n        const hasMinimumText = value.trim().length >= this.minimumTextLength;\n        const position = this.calculatePosition();\n        const items = this.getMatchingItems(value);\n        const hasItems = items.length > 0;\n        const isHidden = this.isVisible === false;\n        const showDropdownIfEmpty = this.showDropdownIfEmpty && hasItems && !value;\n        const isDisabled = this.tagInput.disable;\n        const assertions = [];\n\n        const shouldShow = isHidden && ((hasItems && hasMinimumText) || showDropdownIfEmpty);\n        const shouldHide = this.isVisible && !hasItems;\n\n        if (this.autocompleteObservable && hasMinimumText) {\n            return this.getItemsFromObservable(value);\n        }\n\n        if ((!this.showDropdownIfEmpty && !value) || maxItemsReached || isDisabled) {\n            return this.dropdown.hide();\n        }\n\n        this.setItems(items);\n\n        if (shouldShow) {\n            this.dropdown.show(position);\n        } else if (shouldHide) {\n            this.hide();\n        }\n    }\n\n    /**\n     * @name hide\n     */\n    public hide(): void {\n        this.resetItems();\n        this.dropdown.hide();\n    }\n\n    /**\n     * @name scrollListener\n     */\n    @HostListener('window:scroll')\n    public scrollListener(): void {\n        if (!this.isVisible || !this.dynamicUpdate) {\n            return;\n        }\n\n        this.updatePosition();\n    }\n\n    /**\n     * @name onWindowBlur\n     */\n    @HostListener('window:blur')\n    public onWindowBlur(): void {\n        this.dropdown.hide();\n    }\n\n    /**\n     * @name getFormValue\n     */\n    private getFormValue(): string {\n        return this.tagInput.formValue.trim();\n    }\n\n    /**\n     * @name calculatePosition\n     */\n    private calculatePosition(): ClientRect {\n        return this.tagInput.inputForm.getElementPosition();\n    }\n\n    /**\n     * @name requestAdding\n     * @param item {Ng2MenuItem}\n     */\n    private requestAdding = async (item: Ng2MenuItem) => {\n        const tag = this.createTagModel(item);\n        await this.tagInput.onAddingRequested(true, tag).catch(() => {});\n    }\n\n    /**\n     * @name createTagModel\n     * @param item\n     */\n    private createTagModel(item: Ng2MenuItem): TagModel {\n        const display = typeof item.value === 'string' ? item.value : item.value[this.displayBy];\n        const value = typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\n\n        return {\n            ...item.value,\n            [this.tagInput.displayBy]: display,\n            [this.tagInput.identifyBy]: value\n        };\n    }\n\n    /**\n     *\n     * @param value {string}\n     */\n    private getMatchingItems(value: string): TagModel[] {\n        if (!value && !this.showDropdownIfEmpty) {\n            return [];\n        }\n\n        const dupesAllowed = this.tagInput.allowDupes;\n\n        return this.autocompleteItems.filter((item: TagModel) => {\n            const hasValue = dupesAllowed ? false : this.tagInput.tags.some(tag => {\n                const identifyBy = this.tagInput.identifyBy;\n                const model = typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\n\n                return model === item[this.identifyBy];\n            });\n\n            return this.matchingFn(value, item) && (hasValue === false);\n        });\n    }\n\n    /**\n     * @name setItems\n     */\n    private setItems(items: TagModel[]): void {\n        this.items = items.slice(0, this.limitItemsTo || items.length);\n    }\n\n    /**\n     * @name resetItems\n     */\n    private resetItems = (): void => {\n        this.items = [];\n    }\n\n    /**\n     * @name populateItems\n     * @param data\n     */\n    private populateItems(data: any): TagInputDropdown {\n        this.autocompleteItems = data.map(item => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n\n        return this;\n    }\n\n    /**\n     * @name getItemsFromObservable\n     * @param text\n     */\n    private getItemsFromObservable = (text: string): void => {\n        this.setLoadingState(true);\n\n        const subscribeFn = (data: any[]) => {\n            // hide loading animation\n            this.setLoadingState(false)\n                // add items\n                .populateItems(data);\n\n            this.setItems(this.getMatchingItems(text));\n\n            if (this.items.length) {\n                this.dropdown.show(this.calculatePosition());\n            } else if (!this.showDropdownIfEmpty && this.isVisible) {\n                this.dropdown.hide();\n            } else if (!this.showDropdownIfEmpty) {\n                this.dropdown.hide();\n            }\n        };\n\n        this.autocompleteObservable(text)\n            .pipe(first())\n            .subscribe(subscribeFn, () => this.setLoadingState(false));\n    }\n\n    /**\n     * @name setLoadingState\n     * @param state\n     */\n    private setLoadingState(state: boolean): TagInputDropdown {\n        this.tagInput.isLoading = state;\n\n        return this;\n    }\n}\n",
    "import {\n    Component,\n    Input\n} from '@angular/core';\n\n\nimport {\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state\n} from '@angular/animations';\n\n@Component({\n    selector: 'tag-ripple',\n    styles: [`\n        :host {\n            width: 100%;\n            height: 100%;\n            left: 0;\n            overflow: hidden;\n            position: absolute;\n        }\n        \n        .tag-ripple {\n            background: rgba(0, 0, 0, 0.1);\n            top: 50%;\n            left: 50%;\n            height: 100%;\n            transform: translate(-50%, -50%);\n            position: absolute;\n        }\n    `],\n    template: `\n        <div class=\"tag-ripple\" [@ink]=\"state\"></div>\n    `,\n    animations: [\n        trigger('ink', [\n            state('none', style({width: 0, opacity: 0})),\n            transition('none => clicked', [\n                animate(300, keyframes([\n                    style({opacity: 1, offset: 0, width: '30%', borderRadius: '100%'}),\n                    style({opacity: 1, offset: 0.5, width: '50%'}),\n                    style({opacity: 0.5, offset: 1, width: '100%', borderRadius: '16px'})\n                ]))\n            ])\n        ])\n    ]\n})\nexport class TagRipple {\n    @Input() public state: string = 'none';\n}\n",
    "import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    TemplateRef,\n    ElementRef,\n    HostListener,\n    HostBinding,\n    ViewChild,\n    ChangeDetectorRef,\n    Renderer2\n} from '@angular/core';\n\nimport { TagModel } from '../../core/accessor';\nimport { TagRipple } from '../tag/tag-ripple.component';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst KeyboardEvent = (window as any).KeyboardEvent;\nconst MouseEvent = (window as any).MouseEvent;\n\n// mocking navigator\nconst navigator = typeof window !== 'undefined' ? window.navigator : {\n    userAgent: 'Chrome',\n    vendor: 'Google Inc'\n};\n\nconst isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n\n@Component({\n    selector: 'tag',\n    template: `<div (click)=\"select($event)\"\n     (dblclick)=\"toggleEditMode()\"\n     (mousedown)=\"rippleState='clicked'\"\n     (mouseup)=\"rippleState='none'\"\n     [ngSwitch]=\"!!template\"\n     [class.disabled]=\"disabled\"\n     [attr.tabindex]=\"-1\"\n     [attr.aria-label]=\"getDisplayValue(model)\">\n\n    <div *ngSwitchCase=\"true\" [attr.contenteditable]=\"editing\">\n        <!-- CUSTOM TEMPLATE -->\n        <ng-template\n            [ngTemplateOutletContext]=\"{ item: model, index: index }\"\n            [ngTemplateOutlet]=\"template\">\n        </ng-template>\n    </div>\n\n    <div *ngSwitchCase=\"false\" class=\"tag-wrapper\">\n        <!-- TAG NAME -->\n        <div [attr.contenteditable]=\"editing\"\n             [attr.title]=\"getDisplayValue(model)\"\n             class=\"tag__text inline\"\n             spellcheck=\"false\"\n             (keydown.enter)=\"disableEditMode($event)\"\n             (keydown.escape)=\"disableEditMode($event)\"\n             (click)=\"editing ? $event.stopPropagation() : undefined\"\n             (blur)=\"onBlurred($event)\">\n            {{ getDisplayValue(model) }}\n        </div>\n\n        <!-- 'X' BUTTON -->\n        <delete-icon\n            aria-label=\"Remove tag\"\n            role=\"button\"\n            (click)=\"remove($event)\"\n            *ngIf=\"isDeleteIconVisible()\">\n        </delete-icon>\n    </div>\n</div>\n\n<tag-ripple [state]=\"rippleState\"\n            [attr.tabindex]=\"-1\"\n            *ngIf=\"isRippleVisible\">\n</tag-ripple>\n`,\n    styles: [`:host,:host>div,:host>div:focus{outline:0;overflow:hidden;-webkit-transition:opacity 1s;transition:opacity 1s;z-index:1}:host{max-width:400px}:host.blink{-webkit-animation:.3s ease-in-out forwards blink;animation:.3s ease-in-out forwards blink}@-webkit-keyframes blink{0%{opacity:.3}}@keyframes blink{0%{opacity:.3}}:host .disabled{cursor:not-allowed}:host [contenteditable=true]{outline:0}.tag-wrapper{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;display:-webkit-box;display:-ms-flexbox;display:flex}.tag__text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}`]\n})\nexport class TagComponent {\n    /**\n     * @name model {TagModel}\n     */\n    @Input() public model: TagModel;\n\n    /**\n     * @name removable {boolean}\n     */\n    @Input() public removable: boolean;\n\n    /**\n     * @name editable {boolean}\n     */\n    @Input() public editable: boolean;\n\n    /**\n     * @name template {TemplateRef<any>}\n     */\n    @Input() public template: TemplateRef<any>;\n\n    /**\n     * @name displayBy {string}\n     */\n    @Input() public displayBy: string;\n\n    /**\n     * @name identifyBy {string}\n     */\n    @Input() public identifyBy: string;\n\n    /**\n     * @name index {number}\n     */\n    @Input() public index: number;\n\n    /**\n     * @name hasRipple\n     */\n    @Input() public hasRipple: boolean;\n\n    /**\n     * @name disabled\n     */\n    @Input() public disabled = false;\n\n    /**\n     * @name canAddTag\n     */\n    @Input() public canAddTag: (tag: TagModel) => boolean;\n\n    /**\n     * @name onSelect\n     */\n    @Output() public onSelect: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     */\n    @Output() public onRemove: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onBlur\n     */\n    @Output() public onBlur: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name onKeyDown\n     */\n    @Output() public onKeyDown: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * @name onTagEdited\n     */\n    @Output() public onTagEdited: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n\n    /**\n     * @name readonly {boolean}\n     */\n    public get readonly(): boolean {\n        return typeof this.model !== 'string' && this.model.readonly === true;\n    };\n\n    /**\n     * @name editing\n     */\n    public editing = false;\n\n    /**\n     * @name moving\n     */\n    @HostBinding('class.moving') public moving: boolean;\n\n    /**\n     * @name rippleState\n     */\n    public rippleState = 'none';\n\n    /**\n     * @name ripple {TagRipple}\n     */\n    @ViewChild(TagRipple) public ripple: TagRipple;\n\n    constructor(public element: ElementRef,\n                public renderer: Renderer2,\n                private cdRef: ChangeDetectorRef) {}\n\n    /**\n     * @name select\n     */\n    public select($event?: MouseEvent): void {\n        if (this.readonly || this.disabled) {\n            return;\n        }\n\n        if ($event) {\n            $event.stopPropagation();\n        }\n\n        this.focus();\n\n        this.onSelect.emit(this.model);\n    }\n\n    /**\n     * @name remove\n     */\n    public remove($event: MouseEvent): void {\n        $event.stopPropagation();\n        this.onRemove.emit(this);\n    }\n\n    /**\n     * @name focus\n     */\n    public focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    public move(): void {\n        this.moving = true;\n    }\n\n    /**\n     * @name keydown\n     * @param event\n     */\n    @HostListener('keydown', ['$event'])\n    public keydown(event: KeyboardEvent): void {\n        if (this.editing) {\n            event.keyCode === 13 ? this.disableEditMode(event) : undefined;\n            return;\n        }\n\n        this.onKeyDown.emit({event, model: this.model});\n    }\n\n    /**\n     * @name blink\n     */\n    public blink(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add('blink');\n\n        setTimeout(() => classList.remove('blink'), 50);\n    }\n\n    /**\n     * @name toggleEditMode\n     */\n    public toggleEditMode(): void {\n        if (this.editable) {\n            this.editing ? undefined : this.activateEditMode();\n        }\n    }\n\n    /**\n     * @name onBlurred\n     * @param event\n     */\n    public onBlurred(event: any): void {\n        // Checks if it is editable first before handeling the onBlurred event in order to prevent\n        // a bug in IE where tags are still editable with onlyFromAutocomplete set to true\n\t\tif (!this.editable) {\n            return;\n        }\n\n        this.disableEditMode();\n\n        const value: string = event.target.innerText;\n        const result = typeof this.model === 'string' ? value :\n            {...this.model, [this.displayBy]: value};\n\n        this.onBlur.emit(result);\n    }\n\n    /**\n     * @name getDisplayValue\n     * @param item\n     */\n    public getDisplayValue(item: TagModel): string {\n        return typeof item === 'string' ? item : item[this.displayBy];\n    }\n\n    /**\n     * @desc returns whether the ripple is visible or not\n     * only works in Chrome\n     * @name isRippleVisible\n     */\n    public get isRippleVisible(): boolean {\n        return !this.readonly &&\n            !this.editing &&\n            isChrome &&\n            this.hasRipple;\n    }\n\n    /**\n     * @name disableEditMode\n     * @param $event\n     */\n    public disableEditMode($event?: KeyboardEvent): void {\n        const classList = this.element.nativeElement.classList;\n        const input = this.getContentEditableText();\n\n        this.editing = false;\n        classList.remove('tag--editing');\n\n        if (!input) {\n            this.setContentEditableText(this.model);\n            return;\n        }\n\n        this.storeNewValue(input);\n        this.cdRef.detectChanges();\n\n        if ($event) {\n            $event.preventDefault();\n        }\n    }\n\n    /**\n     * @name isDeleteIconVisible\n     */\n    public isDeleteIconVisible(): boolean {\n        return !this.readonly &&\n            !this.disabled &&\n            this.removable &&\n            !this.editing;\n    }\n\n    /**\n     * @name getContentEditableText\n     */\n    private getContentEditableText(): string {\n        const input = this.getContentEditable();\n\n        return input ? input.innerText.trim() : '';\n    }\n\n    /**\n     * @name setContentEditableText\n     * @param model\n     */\n    private setContentEditableText(model: TagModel) {\n        const input = this.getContentEditable();\n        const value = this.getDisplayValue(model);\n\n        input.innerText = value;\n    }\n\n    /**\n     * @name\n     */\n    private activateEditMode(): void {\n        const classList = this.element.nativeElement.classList;\n        classList.add('tag--editing');\n\n        this.editing = true;\n    }\n\n    /**\n     * @name storeNewValue\n     * @param input\n     */\n    private storeNewValue(input: string): void {\n        const exists = (tag: TagModel) => {\n            return typeof tag === 'string' ?\n            tag === input :\n            tag[this.displayBy] === input;\n        };\n\n        const hasId = () => {\n            return this.model[this.identifyBy] !== this.model[this.displayBy];\n        };\n\n        // if the value changed, replace the value in the model\n        if (exists(this.model)) {\n            return;\n        }\n\n        const model = typeof this.model === 'string' ? input :\n            {\n                index: this.index,\n                [this.identifyBy]: hasId() ? this.model[this.identifyBy] : input,\n                [this.displayBy]: input,\n            };\n\n        if (this.canAddTag(model)) {\n            this.onTagEdited.emit({tag: model, index: this.index});\n        } else {\n            this.setContentEditableText(this.model);\n        }\n    }\n\n    /**\n     * @name getContentEditable\n     */\n    private getContentEditable(): HTMLInputElement {\n        return this.element.nativeElement.querySelector('[contenteditable]');\n    }\n}\n",
    "import {\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n/**\n * @name animations\n */\nexport const animations = [\n    trigger('animation', [\n        state('in', style({\n            opacity: 1\n        })),\n        state('out', style({\n            opacity: 0\n        })),\n        transition(':enter', [\n            animate(\"{{ enter }}\", keyframes([\n                style({opacity: 0, offset: 0, transform: 'translate(0px, 20px)'}),\n                style({opacity: 0.3, offset: 0.3, transform: 'translate(0px, -10px)'}),\n                style({opacity: 0.5, offset: 0.5, transform: 'translate(0px, 0px)'}),\n                style({opacity: 0.75, offset: 0.75, transform: 'translate(0px, 5px)'}),\n                style({opacity: 1, offset: 1, transform: 'translate(0px, 0px)'})\n            ]))\n        ]),\n        transition(':leave', [\n            animate(\"{{ leave }}\", keyframes([\n                style({opacity: 1, transform: 'translateX(0)', offset: 0}),\n                style({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\n                style({opacity: 0, transform: 'translateX(100%)', offset: 1.0})\n            ]))\n        ])\n    ])\n];\n",
    "// angular\nimport {\n    Component,\n    forwardRef,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer2,\n    ViewChild,\n    ViewChildren,\n    ContentChildren,\n    ContentChild,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    AfterViewInit,\n    Type\n} from '@angular/core';\n\nimport {\n    AsyncValidatorFn,\n    FormControl,\n    NG_VALUE_ACCESSOR,\n    ValidatorFn\n} from '@angular/forms';\n\n// rx\nimport { Observable } from 'rxjs';\nimport { of } from 'rxjs';\nimport { combineLatest } from 'rxjs';\nimport { debounceTime, filter, map, first, mapTo, takeWhile,\n     startWith, mergeMap, last, tap\n} from 'rxjs/operators';\n\n// ng2-tag-input\nimport { TagInputAccessor, TagModel } from '../../core/accessor';\nimport { listen } from '../../core/helpers/listen';\nimport * as constants from '../../core/constants';\n\nimport { DragProvider, DraggedTag } from '../../core/providers/drag-provider';\nimport { OptionsProvider } from '../../core/providers/options-provider';\n\nimport { TagInputForm } from '../tag-input-form/tag-input-form.component';\nimport { TagInputDropdown } from '../dropdown/tag-input-dropdown.component';\nimport { TagComponent } from '../tag/tag.component';\n\nimport { animations } from './animations';\nimport { TagInputOptions } from '../../defaults';\nimport { Subscription } from 'rxjs';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst DragEvent = (window as any).DragEvent;\n\nconst CUSTOM_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagInputComponent),\n    multi: true\n};\n\nconst defaults: Type<TagInputOptions> = forwardRef(() => OptionsProvider.defaults.tagInput);\n\n@Component({\n    selector: 'tag-input',\n    providers: [CUSTOM_ACCESSOR],\n    styles: [`.dark tag:focus{-webkit-box-shadow:0 0 0 1px #323232;box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info input{border:none;-webkit-box-shadow:none;box-shadow:none;outline:0;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info input:focus{border:none;-webkit-box-shadow:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused{-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.4);box-shadow:inset 0 1px 1px rgba(0,0,0,.4);border:1px solid #ccc}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid{-webkit-box-shadow:inset 0 1px 1px #d9534f;box-shadow:inset 0 1px 1px #d9534f}.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;-webkit-transition:all .25s;transition:all .25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #2196f3}.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading{border:none}.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.ng2-tag-input form{margin:.1em 0}.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.minimal.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.dark.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.bootstrap.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.bootstrap3-info.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;padding:4px;cursor:text;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);border-radius:4px}.bootstrap3-info.ng2-tag-input:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid{border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input form{margin:.1em 0}.bootstrap3-info.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.error-message{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap .error-message{color:#d9534f}.progress-bar,.progress-bar:before{height:2px;width:100%;margin:0}.progress-bar{background-color:#2196f3;display:-webkit-box;display:-ms-flexbox;display:flex;position:absolute;bottom:0}.progress-bar:before{background-color:#82c4f8;content:'';-webkit-animation:2s cubic-bezier(.4,0,.2,1) infinite running-progress;animation:2s cubic-bezier(.4,0,.2,1) infinite running-progress}@-webkit-keyframes running-progress{0%{margin-left:0;margin-right:100%}50%{margin-left:25%;margin-right:0}100%{margin-left:100%;margin-right:0}}@keyframes running-progress{0%{margin-left:0;margin-right:100%}50%{margin-left:25%;margin-right:0}100%{margin-left:100%;margin-right:0}}tag{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:400;font-size:1em;letter-spacing:.05rem;color:#444;border-radius:16px;-webkit-transition:all .3s;transition:all .3s;margin:.1rem .3rem .1rem 0;padding:.08rem .45rem;height:32px;line-height:34px;background:#efefef;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}tag:not(.readonly):not(.tag--editing):focus{background:#2196f3;color:#fff;-webkit-box-shadow:0 2px 3px 1px #d4d1d1;box-shadow:0 2px 3px 1px #d4d1d1}tag:not(.readonly):not(.tag--editing):active{background:#0d8aee;color:#fff;-webkit-box-shadow:0 2px 3px 1px #d4d1d1;box-shadow:0 2px 3px 1px #d4d1d1}tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#e2e2e2;color:initial;-webkit-box-shadow:0 2px 3px 1px #d4d1d1;box-shadow:0 2px 3px 1px #d4d1d1}tag.readonly{cursor:default}tag.readonly:focus,tag:focus{outline:0}tag.tag--editing{background-color:#fff;border:1px solid #ccc;cursor:text}.minimal tag{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;border-radius:0;background:#f9f9f9;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.minimal tag:not(.readonly):not(.tag--editing):active,.minimal tag:not(.readonly):not(.tag--editing):focus{background:#d0d0d0;color:initial}.minimal tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#ececec}.minimal tag.readonly{cursor:default}.minimal tag.readonly:focus,.minimal tag:focus{outline:0}.minimal tag.tag--editing{cursor:text}.dark tag{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;color:#f9f9f9;border-radius:3px;background:#444;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.dark tag:not(.readonly):not(.tag--editing):focus{background:#efefef;color:#444}.dark tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#2b2b2b;color:#f9f9f9}.dark tag.readonly{cursor:default}.dark tag.readonly:focus,.dark tag:focus{outline:0}.dark tag.tag--editing{cursor:text}.bootstrap tag{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;color:#f9f9f9;border-radius:.25rem;background:#0275d8;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative}.bootstrap tag:not(.readonly):not(.tag--editing):active,.bootstrap tag:not(.readonly):not(.tag--editing):focus{background:#025aa5}.bootstrap tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#0267bf;color:#f9f9f9}.bootstrap tag.readonly{cursor:default}.bootstrap tag.readonly:focus,.bootstrap tag:focus{outline:0}.bootstrap tag.tag--editing{cursor:text}.bootstrap3-info tag{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;font-family:inherit;font-weight:400;font-size:95%;color:#fff;border-radius:.25em;background:#5bc0de;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;outline:0;cursor:pointer;position:relative;padding:.25em .6em;text-align:center;white-space:nowrap}.bootstrap3-info tag:not(.readonly):not(.tag--editing):active,.bootstrap3-info tag:not(.readonly):not(.tag--editing):focus{background:#28a1c5}.bootstrap3-info tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover{background:#46b8da;color:#fff}.bootstrap3-info tag.readonly{cursor:default}.bootstrap3-info tag.readonly:focus,.bootstrap3-info tag:focus{outline:0}.bootstrap3-info tag.tag--editing{cursor:text}:host{display:block}`],\n    template: `<!-- CONTAINER -->\n\n<div ngClass=\"ng2-tag-input {{ theme || '' }}\"\n     (click)=\"focus(true, false)\"\n     [attr.tabindex]=\"-1\"\n\n     (drop)=\"dragZone ? onTagDropped($event, undefined) : undefined\"\n     (dragenter)=\"dragZone ? onDragOver($event) : undefined\"\n     (dragover)=\"dragZone ? onDragOver($event) : undefined\"\n     (dragend)=\"dragZone ? dragProvider.onDragEnd() : undefined\"\n\n     [class.ng2-tag-input--dropping]=\"isDropping()\"\n     [class.ng2-tag-input--disabled]=\"disable\"\n     [class.ng2-tag-input--loading]=\"isLoading\"\n     [class.ng2-tag-input--invalid]=\"hasErrors()\"\n     [class.ng2-tag-input--focused]=\"isInputFocused()\">\n\n    <!-- TAGS -->\n    <div class=\"ng2-tags-container\">\n        <tag *ngFor=\"let item of items; let i = index; trackBy: trackBy\"\n\n             (onSelect)=\"selectItem(item)\"\n             (onRemove)=\"onRemoveRequested(item, i)\"\n             (onKeyDown)=\"handleKeydown($event)\"\n             (onTagEdited)=\"updateEditedTag($event)\"\n             (onBlur)=\"onTagBlurred($event, i)\"\n             draggable=\"{{ editable }}\"\n\n             (dragstart)=\"dragZone ? onDragStarted($event, item, i) : undefined\"\n             (drop)=\"dragZone ? onTagDropped($event, i) : undefined\"\n             (dragenter)=\"dragZone ? onDragOver($event) : undefined\"\n             (dragover)=\"dragZone ? onDragOver($event, i) : undefined\"\n             (dragleave)=\"dragZone ? dragProvider.onDragEnd() : undefined\"\n\n             [canAddTag]=\"isTagValid\"\n             [attr.tabindex]=\"0\"\n             [disabled]=\"disable\"\n             [@animation]=\"animationMetadata\"\n             [hasRipple]=\"ripple\"\n             [index]=\"i\"\n             [removable]=\"removable\"\n             [editable]=\"editable\"\n             [displayBy]=\"displayBy\"\n             [identifyBy]=\"identifyBy\"\n             [template]=\"!!hasCustomTemplate() ? templates.first : undefined\"\n             [draggable]=\"dragZone\"\n             [model]=\"item\">\n        </tag>\n\n        <tag-input-form\n            (onSubmit)=\"onFormSubmit()\"\n            (onBlur)=\"blur()\"\n            (click)=\"dropdown ? dropdown.show() : undefined\"\n            (onKeydown)=\"fireEvents('keydown', $event)\"\n            (onKeyup)=\"fireEvents('keyup', $event)\"\n\n            [(inputText)]=\"inputText\"\n            [disabled]=\"disable\"\n            [validators]=\"validators\"\n            [asyncValidators]=\"asyncValidators\"\n            [hidden]=\"maxItemsReached\"\n            [placeholder]=\"items.length ? placeholder : secondaryPlaceholder\"\n            [inputClass]=\"inputClass\"\n            [inputId]=\"inputId\"\n            [tabindex]=\"tabindex\">\n        </tag-input-form>\n    </div>\n\n    <div class=\"progress-bar\" *ngIf=\"isProgressBarVisible$ | async\"></div>\n</div>\n\n<!-- ERRORS -->\n<div *ngIf=\"hasErrors()\" class=\"error-messages {{ theme || '' }}\">\n    <p *ngFor=\"let error of errors\" class=\"error-message\">\n        <span>{{ error }}</span>\n    </p>\n</div>\n\n<ng-content></ng-content>\n`,\n    animations\n})\nexport class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {\n    /**\n     * @name separatorKeys\n     * @desc keyboard keys with which a user can separate items\n     */\n    @Input() public separatorKeys: string[] = new defaults().separatorKeys;\n\n    /**\n     * @name separatorKeyCodes\n     * @desc keyboard key codes with which a user can separate items\n     */\n    @Input() public separatorKeyCodes: number[] = new defaults().separatorKeyCodes;\n\n    /**\n     * @name placeholder\n     * @desc the placeholder of the input text\n     */\n    @Input() public placeholder: string = new defaults().placeholder;\n\n    /**\n     * @name secondaryPlaceholder\n     * @desc placeholder to appear when the input is empty\n     */\n    @Input() public secondaryPlaceholder: string = new defaults().secondaryPlaceholder;\n\n    /**\n     * @name maxItems\n     * @desc maximum number of items that can be added\n     */\n    @Input() public maxItems: number = new defaults().maxItems;\n\n    /**\n     * @name validators\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public validators: ValidatorFn[] = new defaults().validators;\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = new defaults().asyncValidators;\n\n    /**\n    * - if set to true, it will only possible to add items from the autocomplete\n    * @name onlyFromAutocomplete\n    */\n    @Input() public onlyFromAutocomplete = new defaults().onlyFromAutocomplete;\n\n    /**\n     * @name errorMessages\n     */\n    @Input() public errorMessages: { [key: string]: string } = new defaults().errorMessages;\n\n    /**\n     * @name theme\n     */\n    @Input() public theme: string = new defaults().theme;\n\n    /**\n     * @name onTextChangeDebounce\n     */\n    @Input() public onTextChangeDebounce = new defaults().onTextChangeDebounce;\n\n    /**\n     * - custom id assigned to the input\n     * @name id\n     */\n    @Input() public inputId = new defaults().inputId;\n\n    /**\n     * - custom class assigned to the input\n     */\n    @Input() public inputClass: string = new defaults().inputClass;\n\n    /**\n     * - option to clear text input when the form is blurred\n     * @name clearOnBlur\n     */\n    @Input() public clearOnBlur: boolean = new defaults().clearOnBlur;\n\n    /**\n     * - hideForm\n     * @name clearOnBlur\n     */\n    @Input() public hideForm: boolean = new defaults().hideForm;\n\n    /**\n     * @name addOnBlur\n     */\n    @Input() public addOnBlur: boolean = new defaults().addOnBlur;\n\n    /**\n     * @name addOnPaste\n     */\n    @Input() public addOnPaste: boolean = new defaults().addOnPaste;\n\n    /**\n     * - pattern used with the native method split() to separate patterns in the string pasted\n     * @name pasteSplitPattern\n     */\n    @Input() public pasteSplitPattern = new defaults().pasteSplitPattern;\n\n    /**\n     * @name blinkIfDupe\n     */\n    @Input() public blinkIfDupe = new defaults().blinkIfDupe;\n\n    /**\n     * @name removable\n     */\n    @Input() public removable = new defaults().removable;\n\n    /**\n     * @name editable\n     */\n    @Input() public editable: boolean = new defaults().editable;\n\n    /**\n     * @name allowDupes\n     */\n    @Input() public allowDupes = new defaults().allowDupes;\n\n    /**\n     * @description if set to true, the newly added tags will be added as strings, and not objects\n     * @name modelAsStrings\n     */\n    @Input() public modelAsStrings = new defaults().modelAsStrings;\n\n    /**\n     * @name trimTags\n     */\n    @Input() public trimTags = new defaults().trimTags;\n\n    /**\n     * @name inputText\n     */\n    @Input() public get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /**\n     * @name ripple\n     */\n    @Input() public ripple: boolean = new defaults().ripple;\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     */\n    @Input() public tabindex: string = new defaults().tabIndex;\n\n    /**\n     * @name disable\n     */\n    @Input() public disable: boolean = new defaults().disable;\n\n    /**\n     * @name dragZone\n     */\n    @Input() public dragZone: string = new defaults().dragZone;\n\n    /**\n     * @name onRemoving\n     */\n    @Input() public onRemoving = new defaults().onRemoving;\n\n    /**\n     * @name onAdding\n     */\n    @Input() public onAdding = new defaults().onAdding;\n\n    /**\n     * @name animationDuration\n     */\n    @Input() public animationDuration = new defaults().animationDuration;\n\n    /**\n     * @name onAdd\n     * @desc event emitted when adding a new item\n     */\n    @Output() public onAdd = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     * @desc event emitted when removing an existing item\n     */\n    @Output() public onRemove = new EventEmitter<TagModel>();\n\n    /**\n     * @name onSelect\n     * @desc event emitted when selecting an item\n     */\n    @Output() public onSelect = new EventEmitter<TagModel>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is focused\n     */\n    @Output() public onFocus = new EventEmitter<string>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is blurred\n     */\n    @Output() public onBlur = new EventEmitter<string>();\n\n    /**\n     * @name onTextChange\n     * @desc event emitted when the input value changes\n     */\n    @Output() public onTextChange = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when text is pasted in the form\n     * @name onPaste\n     */\n    @Output() public onPaste = new EventEmitter<string>();\n\n    /**\n     * - output triggered when tag entered is not valid\n     * @name onValidationError\n     */\n    @Output() public onValidationError = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when tag is edited\n     * @name onTagEdited\n     */\n    @Output() public onTagEdited = new EventEmitter<TagModel>();\n\n    /**\n     * @name dropdown\n     */\n    @ContentChild(TagInputDropdown) public dropdown: TagInputDropdown;\n\n    /**\n     * @name template\n     * @desc reference to the template if provided by the user\n     */\n    @ContentChildren(TemplateRef, { descendants: false }) public templates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @name inputForm\n     */\n    @ViewChild(TagInputForm) public inputForm: TagInputForm;\n\n    /**\n     * @name selectedTag\n     * @desc reference to the current selected tag\n     */\n    public selectedTag: TagModel | undefined;\n\n    /**\n     * @name isLoading\n     */\n    public isLoading = false;\n\n    /**\n     * @name inputText\n     * @param text\n     */\n    public set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n\n    /**\n     * @name tags\n     * @desc list of Element items\n     */\n    @ViewChildren(TagComponent) public tags: QueryList<TagComponent>;\n\n    /**\n     * @name listeners\n     * @desc array of events that get fired using @fireEvents\n     */\n    private listeners = {\n        [constants.KEYDOWN]: <{ (fun): any }[]>[],\n        [constants.KEYUP]: <{ (fun): any }[]>[]\n    };\n\n    /**\n     * @description emitter for the 2-way data binding inputText value\n     * @name inputTextChange\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * @description private variable to bind get/set\n     * @name inputTextValue\n     */\n    public inputTextValue = '';\n\n    /**\n     * @desc removes the tab index if it is set - it will be passed through to the input\n     * @name tabindexAttr\n     */\n    @HostBinding('attr.tabindex')\n    public get tabindexAttr(): string {\n        return this.tabindex !== '' ? '-1' : '';\n    }\n\n    /**\n     * @name animationMetadata\n     */\n    public animationMetadata: { value: string, params: object };\n\n    public errors: string[] = [];\n\n    public isProgressBarVisible$: Observable<boolean>;\n\n    constructor(private readonly renderer: Renderer2,\n                public readonly dragProvider: DragProvider) {\n        super();\n    }\n\n    /**\n     * @name ngAfterViewInit\n     */\n    public ngAfterViewInit(): void {\n        // set up listeners\n\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n\n        if (this.onTextChange.observers.length) {\n            this.setUpTextChangeSubscriber();\n        }\n\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.setUpOnBlurSubscriber();\n        }\n\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            this.setUpOnPasteListener();\n        }\n\n        const statusChanges$ = this.inputForm.form.statusChanges;\n\n        statusChanges$.pipe(\n            filter((status: string) => status !== 'PENDING')\n        ).subscribe(() => {\n            this.errors = this.inputForm.getErrorMessages(this.errorMessages);\n        });\n\n        this.isProgressBarVisible$ = statusChanges$.pipe(\n            map((status: string) => {\n                return status === 'PENDING' || this.isLoading;\n            })\n        );\n\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n    }\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        const hasReachedMaxItems = this.maxItems !== undefined &&\n            this.items &&\n            this.items.length > this.maxItems;\n\n        if (hasReachedMaxItems) {\n            this.maxItems = this.items.length;\n            console.warn(constants.MAX_ITEMS_WARNING);\n        }\n\n        // Setting editable to false to fix problem with tags in IE still being editable when\n        // onlyFromAutocomplete is true\n        this.editable = this.onlyFromAutocomplete ? false : this.editable;\n\n        this.setAnimationMetadata();\n    }\n\n    /**\n     * @name onRemoveRequested\n     * @param tag\n     * @param index\n     */\n    public onRemoveRequested(tag: TagModel, index: number): Promise<TagModel> {\n        return new Promise(resolve => {\n            const subscribeFn = (model: TagModel) => {\n                this.removeItem(model, index);\n                resolve(tag);\n            };\n\n            this.onRemoving ?\n                this.onRemoving(tag)\n                    .pipe(first())\n                    .subscribe(subscribeFn) : subscribeFn(tag);\n        });\n    }\n\n    /**\n     * @name onAddingRequested\n     * @param fromAutocomplete {boolean}\n     * @param tag {TagModel}\n     */\n    public onAddingRequested(fromAutocomplete: boolean, tag: TagModel, index?: number): Promise<TagModel> {\n        return new Promise((resolve, reject) => {\n            const subscribeFn = (model: TagModel) => {\n                return this\n                    .addItem(fromAutocomplete, model, index)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            return this.onAdding ?\n                this.onAdding(tag)\n                    .pipe(first())\n                    .subscribe(subscribeFn, reject) : subscribeFn(tag);\n        });\n    }\n\n    /**\n     * @name appendTag\n     * @param tag {TagModel}\n     */\n    public appendTag = (tag: TagModel, index = this.items.length): void => {\n        const items = this.items;\n        const model = this.modelAsStrings ? tag[this.identifyBy] : tag;\n\n        this.items = [\n            ...items.slice(0, index),\n            model,\n            ...items.slice(index, items.length)\n        ];\n    }\n\n    /**\n     * @name createTag\n     * @param model\n     */\n    public createTag = (model: TagModel): TagModel => {\n        const trim = (val: TagModel, key: string): TagModel => {\n            return typeof val === 'string' ? val.trim() : val[key];\n        };\n\n        return {\n            ...typeof model !== 'string' ? model : {},\n            [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model,\n            [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model\n        };\n    }\n\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     * @param emit\n     */\n    public selectItem(item: TagModel | undefined, emit = true): void {\n        const isReadonly = item && typeof item !== 'string' && item.readonly;\n\n        if (isReadonly || this.selectedTag === item) {\n            return;\n        }\n\n        this.selectedTag = item;\n\n        if (emit) {\n            this.onSelect.emit(item);\n        }\n    }\n\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    public fireEvents(eventName: string, $event?): void {\n        this.listeners[eventName].forEach(listener => listener.call(this, $event));\n    }\n\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    public handleKeydown(data: any): void {\n        const event = data.event;\n        const key = event.keyCode || event.which;\n        const shiftKey = event.shiftKey || false;\n\n        switch (constants.KEY_PRESS_ACTIONS[key]) {\n            case constants.ACTIONS_KEYS.DELETE:\n                if (this.selectedTag && this.removable) {\n                    const index = this.items.indexOf(this.selectedTag);\n                    this.onRemoveRequested(this.selectedTag, index);\n                }\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_PREV:\n                this.moveToTag(data.model, constants.PREV);\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_NEXT:\n                this.moveToTag(data.model, constants.NEXT);\n                break;\n            case constants.ACTIONS_KEYS.TAB:\n                if (shiftKey) {\n                    if (this.isFirstTag(data.model)) {\n                        return;\n                    }\n\n                    this.moveToTag(data.model, constants.PREV);\n                } else {\n                    if (this.isLastTag(data.model) && (this.disable || this.maxItemsReached)) {\n                        return;\n                    }\n\n                    this.moveToTag(data.model, constants.NEXT);\n                }\n                break;\n            default:\n                return;\n        }\n\n        // prevent default behaviour\n        event.preventDefault();\n    }\n\n    public async onFormSubmit() {\n        try {\n            await this.onAddingRequested(false, this.formValue);\n        } catch {\n            return;\n        }\n    }\n\n    /**\n     * @name setInputValue\n     * @param value\n     */\n    public setInputValue(value: string, emitEvent = true): void {\n        const control = this.getControl();\n\n        // update form value with the transformed item\n        control.setValue(value, {\n            emitEvent\n        });\n    }\n\n    /**\n     * @name getControl\n     */\n    private getControl(): FormControl {\n        return <FormControl>this.inputForm.value;\n    }\n\n    /**\n     * @name focus\n     * @param applyFocus\n     * @param displayAutocomplete\n     */\n    public focus(applyFocus = false, displayAutocomplete = false): void {\n        if (this.dragProvider.getState('dragging')) {\n            return;\n        }\n\n        this.selectItem(undefined, false);\n\n        if (applyFocus) {\n            this.inputForm.focus();\n            this.onFocus.emit(this.formValue);\n        }\n    }\n\n    /**\n     * @name blur\n     */\n    public blur(): void {\n        this.onTouched();\n\n        this.onBlur.emit(this.formValue);\n    }\n\n    /**\n     * @name hasErrors\n     */\n    public hasErrors(): boolean {\n        return this.inputForm && this.inputForm.hasErrors();\n    }\n\n    /**\n     * @name isInputFocused\n     */\n    public isInputFocused(): boolean {\n        return this.inputForm && this.inputForm.isInputFocused();\n    }\n\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    public hasCustomTemplate(): boolean {\n        const template = this.templates ? this.templates.first : undefined;\n        const menuTemplate = this.dropdown && this.dropdown.templates ?\n            this.dropdown.templates.first : undefined;\n\n        return Boolean(template && template !== menuTemplate);\n    }\n\n    /**\n     * @name maxItemsReached\n     */\n    public get maxItemsReached(): boolean {\n        return this.maxItems !== undefined &&\n            this.items.length >= this.maxItems;\n    }\n\n    /**\n     * @name formValue\n     */\n    public get formValue(): string {\n        const form = this.inputForm.value;\n\n        return form ? form.value : '';\n    }\n\n    /**3\n     * @name onDragStarted\n     * @param event\n     * @param index\n     */\n    public onDragStarted(event: DragEvent, tag: TagModel, index: number): void {\n        event.stopPropagation();\n\n        const item = { zone: this.dragZone, tag, index } as DraggedTag;\n\n        this.dragProvider.setSender(this);\n        this.dragProvider.setDraggedItem(event, item);\n        this.dragProvider.setState({dragging: true, index});\n    }\n\n    /**\n     * @name onDragOver\n     * @param event\n     */\n    public onDragOver(event: DragEvent, index?: number): void {\n        this.dragProvider.setState({dropping: true});\n        this.dragProvider.setReceiver(this);\n\n        event.preventDefault();\n    }\n\n    /**\n     * @name onTagDropped\n     * @param event\n     * @param index\n     */\n    public onTagDropped(event: DragEvent, index?: number): void {\n        const item = this.dragProvider.getDraggedItem(event);\n\n        if (item.zone !== this.dragZone) {\n            return;\n        }\n\n        this.dragProvider.onTagDropped(item.tag, item.index, index);\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /**\n     * @name isDropping\n     */\n    public isDropping(): boolean {\n        const isReceiver = this.dragProvider.receiver === this;\n        const isDropping = this.dragProvider.getState('dropping');\n\n        return Boolean(isReceiver && isDropping);\n    }\n\n    /**\n     * @name onTagBlurred\n     * @param changedElement {TagModel}\n     * @param index {number}\n     */\n    public onTagBlurred(changedElement: TagModel, index: number): void {\n        this.items[index] = changedElement;\n        this.blur();\n    }\n\n    /**\n     * @name trackBy\n     * @param items\n     */\n    public trackBy(index: number, item: TagModel): string {\n        return item[this.identifyBy];\n    }\n\n    /**\n     * @name updateEditedTag\n     * @param tag\n     */\n    public updateEditedTag({tag, index}: {tag: TagModel, index: number}): void {\n        this.onTagEdited.emit(tag);\n    }\n\n    /**\n     *\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    public isTagValid = (tag: TagModel, fromAutocomplete = false): boolean => {\n        const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\n        const value = this.getItemDisplay(tag).trim();\n\n        if (selectedItem && !fromAutocomplete || !value) {\n            return false;\n        }\n\n        const dupe = this.findDupe(tag, fromAutocomplete);\n\n        // if so, give a visual cue and return false\n        if (!this.allowDupes && dupe && this.blinkIfDupe) {\n            const model = this.tags.find(item => {\n                return this.getItemValue(item.model) === this.getItemValue(dupe);\n            });\n\n            if (model) {\n                model.blink();\n            }\n        }\n\n        const isFromAutocomplete = fromAutocomplete && this.onlyFromAutocomplete;\n\n        const assertions = [\n            // 1. there must be no dupe OR dupes are allowed\n            !dupe || this.allowDupes === true,\n\n            // 2. check max items has not been reached\n            this.maxItemsReached === false,\n\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n            ((isFromAutocomplete) || this.onlyFromAutocomplete === false)\n        ];\n\n        return assertions.filter(item => item).length === assertions.length;\n    }\n\n    /**\n     * @name moveToTag\n     * @param item\n     * @param direction\n     */\n    private moveToTag(item: TagModel, direction: string): void {\n        const isLast = this.isLastTag(item);\n        const isFirst = this.isFirstTag(item);\n        const stopSwitch = (direction === constants.NEXT && isLast) ||\n            (direction === constants.PREV && isFirst);\n\n        if (stopSwitch) {\n            this.focus(true);\n            return;\n        }\n\n        const offset = direction === constants.NEXT ? 1 : -1;\n        const index = this.getTagIndex(item) + offset;\n        const tag = this.getTagAtIndex(index);\n\n        return tag.select.call(tag);\n    }\n\n    /**\n     * @name isFirstTag\n     * @param item {TagModel}\n     */\n    private isFirstTag(item: TagModel): boolean {\n        return this.tags.first.model === item;\n    }\n\n    /**\n     * @name isLastTag\n     * @param item {TagModel}\n     */\n    private isLastTag(item: TagModel): boolean {\n        return this.tags.last.model === item;\n    }\n\n    /**\n     * @name getTagIndex\n     * @param item\n     */\n    private getTagIndex(item: TagModel): number {\n        const tags = this.tags.toArray();\n\n        return tags.findIndex(tag => tag.model === item);\n    }\n\n    /**\n     * @name getTagAtIndex\n     * @param index\n     */\n    private getTagAtIndex(index: number) {\n        const tags = this.tags.toArray();\n\n        return tags[index];\n    }\n\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    private removeItem(tag: TagModel, index: number): void {\n        this.items = this.getItemsWithout(index);\n\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectItem(undefined, false);\n        }\n\n        // focus input\n        this.focus(true, false);\n\n        // emit remove event\n        this.onRemove.emit(tag);\n    }\n\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     * @param fromAutocomplete\n     * @param item\n     */\n    private addItem(fromAutocomplete = false, item: TagModel, index?: number): Promise<TagModel> {\n        const display = this.getItemDisplay(item);\n        const tag = this.createTag(item);\n\n        if (fromAutocomplete) {\n            this.setInputValue(display);\n        }\n\n        return new Promise((resolve, reject) => {\n            /**\n             * @name reset\n             */\n            const reset = (): void => {\n                // reset control and focus input\n                this.setInputValue('');\n\n                // focus input\n                this.focus(true, false);\n\n                resolve(display);\n            };\n\n            const appendItem = (): void => {\n                this.appendTag(tag, index);\n\n                // emit event\n                this.onAdd.emit(tag);\n\n                if (!this.dropdown) {\n                    return;\n                }\n\n                this.dropdown.hide();\n\n                if (this.dropdown.showDropdownIfEmpty) {\n                    this.dropdown.show();\n                }\n            };\n\n            const status = this.inputForm.form.status;\n            const isTagValid = this.isTagValid(tag, fromAutocomplete);\n\n            const onValidationError = () => {\n                this.onValidationError.emit(tag);\n                return reject();\n            };\n\n            if (status === 'VALID' && isTagValid) {\n                appendItem();\n                return reset();\n            }\n\n            if (status === 'INVALID' || !isTagValid) {\n                reset();\n                return onValidationError();\n            }\n\n            if (status === 'PENDING') {\n                const statusUpdate$ = this.inputForm.form.statusChanges;\n\n                return statusUpdate$\n                    .pipe(\n                        filter(statusUpdate => statusUpdate !== 'PENDING'),\n                        first()\n                    )\n                    .subscribe((statusUpdate) => {\n                        if (statusUpdate === 'VALID' && isTagValid) {\n                            appendItem();\n                            resolve();\n                        } else {\n                            onValidationError();\n                        }\n                });\n            }\n        });\n    }\n\n    /**\n     * @name setupSeparatorKeysListener\n     */\n    private setupSeparatorKeysListener(): void {\n        const useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n        const listener = ($event) => {\n            const hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n            const hasKey = this.separatorKeys.indexOf($event.key) >= 0;\n            // the keyCode of keydown event is 229 when IME is processing the key event.\n            const isIMEProcessing = $event.keyCode === 229;\n\n            if (hasKeyCode || (hasKey && !isIMEProcessing)) {\n                $event.preventDefault();\n                this.onAddingRequested(false, this.formValue)\n                    .catch(() => {});\n            }\n        };\n\n        listen.call(this, constants.KEYDOWN, listener, useSeparatorKeys);\n    }\n\n    /**\n     * @name setUpKeypressListeners\n     */\n    private setUpKeypressListeners(): void {\n        const listener = ($event) => {\n            const isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n            if (isCorrectKey &&\n                !this.formValue &&\n                this.items.length) {\n                this.tags.last.select.call(this.tags.last);\n            }\n        };\n\n        // setting up the keypress listeners\n        listen.call(this, constants.KEYDOWN, listener);\n    }\n\n    /**\n     * @name setUpKeydownListeners\n     */\n    private setUpInputKeydownListeners(): void {\n        this.inputForm.onKeydown.subscribe(event => {\n            this.fireEvents('keydown', event);\n\n            if (event.key === 'Backspace' && this.formValue.trim() === '') {\n                event.preventDefault();\n            }\n        });\n    }\n\n    /**\n     * @name setUpOnPasteListener\n     */\n    private setUpOnPasteListener() {\n        const input = this.inputForm.input.nativeElement;\n\n        // attach listener to input\n        this.renderer.listen(input, 'paste', (event) => {\n            this.onPasteCallback(event);\n\n            event.preventDefault();\n            return true;\n        });\n    }\n\n    /**\n     * @name setUpTextChangeSubscriber\n     */\n    private setUpTextChangeSubscriber(): void {\n        this.inputForm.form\n            .valueChanges\n            .pipe(\n                debounceTime(this.onTextChangeDebounce)\n            )\n            .subscribe((value: {item: string}) => {\n                this.onTextChange.emit(value.item);\n            });\n    }\n\n    /**\n     * @name setUpOnBlurSubscriber\n     */\n    private setUpOnBlurSubscriber(): void {\n        const filterFn = (): boolean => {\n            const isVisible = this.dropdown && this.dropdown.isVisible;\n            return !isVisible && !!this.formValue;\n        };\n\n        this.inputForm\n            .onBlur\n            .pipe(\n                debounceTime(100),\n                filter(filterFn)\n            )\n            .subscribe(() => {\n                const reset = () => this.setInputValue('');\n\n                if (this.addOnBlur) {\n                    return this\n                        .onAddingRequested(false, this.formValue)\n                        .then(reset)\n                        .catch(reset);\n                }\n\n                reset();\n            });\n    }\n\n    /**\n     * @name findDupe\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    private findDupe(tag: TagModel, isFromAutocomplete: boolean): TagModel | undefined {\n        const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        const id = tag[identifyBy];\n\n        return this.items.find(item => this.getItemValue(item) === id);\n    }\n\n    /**\n     * @name onPasteCallback\n     * @param data\n     */\n    private onPasteCallback = async (data: ClipboardEvent) => {\n        interface IEWindow extends Window {\n            clipboardData: DataTransfer;\n        }\n\n        const getText = (): string => {\n            const isIE = Boolean((window as IEWindow).clipboardData);\n            const clipboardData = isIE ? (\n                (window as IEWindow).clipboardData\n            ) : data.clipboardData;\n            const type = isIE ? 'Text' : 'text/plain';\n\n            return clipboardData.getData(type) || '';\n        };\n\n        const text = getText();\n\n        const requests = text\n            .split(this.pasteSplitPattern)\n            .map(item => {\n                const tag = this.createTag(item);\n                this.setInputValue(tag[this.displayBy]);\n                return this.onAddingRequested(false, tag);\n            });\n\n        const resetInput = () => setTimeout(() => this.setInputValue(''), 50);\n\n        Promise.all(requests).then(() => {\n            this.onPaste.emit(text);\n            resetInput();\n       })\n       .catch(resetInput);\n    }\n\n    /**\n     * @name setAnimationMetadata\n     */\n    private setAnimationMetadata(): void {\n        this.animationMetadata = {\n            value: 'in',\n            params: {...this.animationDuration}\n        };\n    }\n}\n",
    "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'delete-icon',\n    template: `<span>\n    <svg height=\"16px\" viewBox=\"0 0 32 32\" width=\"16px\">\n        <path d=\"M17.459,16.014l8.239-8.194c0.395-0.391,0.395-1.024,0-1.414c-0.394-0.391-1.034-0.391-1.428,0  l-8.232,8.187L7.73,6.284c-0.394-0.395-1.034-0.395-1.428,0c-0.394,0.396-0.394,1.037,0,1.432l8.302,8.303l-8.332,8.286  c-0.394,0.391-0.394,1.024,0,1.414c0.394,0.391,1.034,0.391,1.428,0l8.325-8.279l8.275,8.276c0.394,0.395,1.034,0.395,1.428,0  c0.394-0.396,0.394-1.037,0-1.432L17.459,16.014z\"\n              fill=\"#121313\" />\n    </svg>\n</span>\n`,\n    styles: [`.dark tag:focus{-webkit-box-shadow:0 0 0 1px #323232;box-shadow:0 0 0 1px #323232}.ng2-tag-input.bootstrap3-info{background-color:#fff;display:inline-block;color:#555;vertical-align:middle;max-width:100%;height:42px;line-height:44px}.ng2-tag-input.bootstrap3-info input{border:none;-webkit-box-shadow:none;box-shadow:none;outline:0;background-color:transparent;padding:0 6px;margin:0;width:auto;max-width:inherit}.ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder{color:#777;opacity:1}.ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder{color:#777}.ng2-tag-input.bootstrap3-info input:focus{border:none;-webkit-box-shadow:none;box-shadow:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--focused{-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.4);box-shadow:inset 0 1px 1px rgba(0,0,0,.4);border:1px solid #ccc}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid{-webkit-box-shadow:inset 0 1px 1px #d9534f;box-shadow:inset 0 1px 1px #d9534f}.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;-webkit-transition:all .25s;transition:all .25s;padding:.25rem 0;min-height:32px;cursor:text;border-bottom:2px solid #efefef}.ng2-tag-input:focus{outline:0}.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #2196f3}.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #f44336}.ng2-tag-input.ng2-tag-input--loading{border:none}.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.ng2-tag-input form{margin:.1em 0}.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.minimal.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;cursor:text;border-bottom:1px solid transparent}.minimal.ng2-tag-input:focus{outline:0}.minimal.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.minimal.ng2-tag-input.ng2-tag-input--loading{border:none}.minimal.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.minimal.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.dark.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #444}.dark.ng2-tag-input:focus{outline:0}.dark.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.dark.ng2-tag-input.ng2-tag-input--loading{border:none}.dark.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.dark.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.bootstrap.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;cursor:text;border-bottom:2px solid #efefef}.bootstrap.ng2-tag-input:focus{outline:0}.bootstrap.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap.ng2-tag-input.ng2-tag-input--focused{border-bottom:2px solid #0275d8}.bootstrap.ng2-tag-input.ng2-tag-input--invalid{border-bottom:2px solid #d9534f}.bootstrap.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.bootstrap3-info.ng2-tag-input{display:block;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;padding:4px;cursor:text;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);border-radius:4px}.bootstrap3-info.ng2-tag-input:focus{outline:0}.bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping{opacity:.7}.bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid{border-bottom:1px solid #d9534f}.bootstrap3-info.ng2-tag-input.ng2-tag-input--loading{border:none}.bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled{opacity:.5;cursor:not-allowed}.bootstrap3-info.ng2-tag-input form{margin:.1em 0}.bootstrap3-info.ng2-tag-input .ng2-tags-container{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-ms-flexbox;display:flex}.error-message{font-size:.8em;color:#f44336;margin:.5em 0 0}.bootstrap .error-message{color:#d9534f}:host(delete-icon){width:20px;height:16px;-webkit-transition:all .15s;transition:all .15s;display:inline-block;text-align:right}:host(delete-icon) path{fill:#444}:host(delete-icon) svg{vertical-align:bottom;height:34px}:host(delete-icon):hover{-webkit-transform:scale(1.5) translateY(-3px);transform:scale(1.5) translateY(-3px)}:host-context(.dark){text-align:right}:host-context(.dark) path{fill:#fff}:host-context(.dark) svg{vertical-align:bottom;height:34px}:host-context(.minimal){text-align:right}:host-context(.minimal) path{fill:#444}:host-context(.minimal) svg{vertical-align:bottom;height:34px}:host-context(.bootstrap){text-align:right}:host-context(.bootstrap) path{fill:#fff}:host-context(.bootstrap) svg{vertical-align:bottom;height:34px}:host-context(tag:active) path,:host-context(tag:focus) path{fill:#fff}:host-context(.darktag:active) path,:host-context(.darktag:focus) path{fill:#000}:host-context(.minimaltag:active) path,:host-context(.minimaltag:focus) path{fill:#000}:host-context(.bootstraptag:active) path,:host-context(.bootstraptag:focus) path{fill:#fff}:host-context(.bootstrap3-info){height:inherit}:host-context(.bootstrap3-info) path{fill:#fff}`]\n})\nexport class DeleteIconComponent {}\n",
    "import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Ng2DropdownModule } from 'ng2-material-dropdown';\nimport { HighlightPipe } from './core/pipes/highlight.pipe';\nimport { DragProvider } from './core/providers/drag-provider';\nimport { OptionsProvider, Options } from './core/providers/options-provider';\nimport { TagInputComponent } from './components/tag-input/tag-input';\nimport { DeleteIconComponent } from './components/icon/icon';\nimport { TagInputForm } from './components/tag-input-form/tag-input-form.component';\nimport { TagComponent } from './components/tag/tag.component';\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagRipple } from './components/tag/tag-ripple.component';\n\nconst optionsProvider = new OptionsProvider();\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule,\n        Ng2DropdownModule\n    ],\n    declarations: [\n        TagInputComponent,\n        DeleteIconComponent,\n        TagInputForm,\n        TagComponent,\n        HighlightPipe,\n        TagInputDropdown,\n        TagRipple\n    ],\n    exports: [\n        TagInputComponent,\n        DeleteIconComponent,\n        TagInputForm,\n        TagComponent,\n        HighlightPipe,\n        TagInputDropdown,\n        TagRipple\n    ],\n    providers: [\n        DragProvider,\n        { provide: COMPOSITION_BUFFER_MODE, useValue: false },\n    ]\n})\nexport class TagInputModule {\n    /**\n     * @name withDefaults\n     * @param options {Options}\n     */\n    public static withDefaults(options: Options): void {\n        optionsProvider.setOptions(options);\n    }\n}\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__awaiter",
    "thisArg",
    "_arguments",
    "P",
    "generator",
    "Promise",
    "resolve",
    "reject",
    "fulfilled",
    "value",
    "step",
    "next",
    "e",
    "rejected",
    "result",
    "done",
    "then",
    "apply",
    "__generator",
    "body",
    "f",
    "y",
    "t",
    "g",
    "_",
    "label",
    "sent",
    "trys",
    "ops",
    "verb",
    "throw",
    "return",
    "Symbol",
    "iterator",
    "this",
    "n",
    "v",
    "op",
    "TypeError",
    "call",
    "pop",
    "length",
    "push",
    "__read",
    "o",
    "m",
    "r",
    "i",
    "ar",
    "error",
    "HighlightPipe",
    "prototype",
    "transform",
    "arg",
    "trim",
    "regex",
    "RegExp",
    "replace",
    "type",
    "Pipe",
    "args",
    "name",
    "KEYDOWN",
    "KEYUP",
    "ACTIONS_KEYS",
    "KEY_PRESS_ACTIONS",
    "8",
    "37",
    "39",
    "9",
    "DRAG_AND_DROP_KEY",
    "NEXT",
    "PREV",
    "DragProvider",
    "state",
    "dragging",
    "dropping",
    "index",
    "undefined",
    "setDraggedItem",
    "event",
    "tag",
    "dataTransfer",
    "setData",
    "JSON",
    "stringify",
    "getDraggedItem",
    "data",
    "getData",
    "parse",
    "setSender",
    "sender",
    "setReceiver",
    "receiver",
    "onTagDropped",
    "indexDragged",
    "indexDropped",
    "onDragEnd",
    "onRemoveRequested",
    "onAddingRequested",
    "setState",
    "assign",
    "getState",
    "key",
    "Injectable",
    "defaults",
    "tagInput",
    "separatorKeys",
    "separatorKeyCodes",
    "maxItems",
    "Infinity",
    "placeholder",
    "secondaryPlaceholder",
    "validators",
    "asyncValidators",
    "onlyFromAutocomplete",
    "errorMessages",
    "theme",
    "onTextChangeDebounce",
    "inputId",
    "inputClass",
    "clearOnBlur",
    "hideForm",
    "addOnBlur",
    "addOnPaste",
    "pasteSplitPattern",
    "blinkIfDupe",
    "removable",
    "editable",
    "allowDupes",
    "modelAsStrings",
    "trimTags",
    "ripple",
    "tabIndex",
    "disable",
    "dragZone",
    "onRemoving",
    "onAdding",
    "displayBy",
    "identifyBy",
    "animationDuration",
    "enter",
    "leave",
    "dropdown",
    "appendToBody",
    "offset",
    "focusFirstElement",
    "showDropdownIfEmpty",
    "minimumTextLength",
    "limitItemsTo",
    "keepOpen",
    "dynamicUpdate",
    "zIndex",
    "matchingFn",
    "target",
    "targetValue",
    "toString",
    "toLowerCase",
    "indexOf",
    "OptionsProvider",
    "setOptions",
    "options",
    "isObject",
    "obj",
    "TagInputAccessor",
    "_items",
    "defineProperty",
    "get",
    "set",
    "items",
    "_onChangeCallback",
    "onTouched",
    "_onTouchedCallback",
    "writeValue",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "getItemValue",
    "item",
    "getItemDisplay",
    "getItemsWithout",
    "filter",
    "position",
    "listen",
    "listenerType",
    "action",
    "condition",
    "listeners",
    "Error",
    "Input",
    "TagInputForm",
    "onSubmit",
    "EventEmitter",
    "onBlur",
    "onFocus",
    "onKeyup",
    "onKeydown",
    "inputTextChange",
    "tabindex",
    "disabled",
    "FormControl",
    "text",
    "setValue",
    "emit",
    "ngOnInit",
    "setValidators",
    "setAsyncValidators",
    "form",
    "FormGroup",
    "ngOnChanges",
    "changes",
    "firstChange",
    "currentValue",
    "controls",
    "enable",
    "isInputFocused",
    "document",
    "activeElement",
    "input",
    "nativeElement",
    "getErrorMessages",
    "messages",
    "_this",
    "keys",
    "err",
    "hasError",
    "map",
    "hasErrors",
    "_b",
    "dirty",
    "valid",
    "focus",
    "blur",
    "getElementPosition",
    "getBoundingClientRect",
    "destroy",
    "parentElement",
    "removeChild",
    "onKeyDown",
    "$event",
    "inputText",
    "submit",
    "onKeyUp",
    "preventDefault",
    "Component",
    "selector",
    "styles",
    "template",
    "Output",
    "ViewChild",
    "forwardRef",
    "TagInputDropdown",
    "injector",
    "TagInputComponent",
    "_autocompleteItems",
    "show",
    "maxItemsReached",
    "getFormValue",
    "hasMinimumText",
    "calculatePosition",
    "getMatchingItems",
    "hasItems",
    "isHidden",
    "isVisible",
    "isDisabled",
    "shouldShow",
    "shouldHide",
    "autocompleteObservable",
    "getItemsFromObservable",
    "hide",
    "setItems",
    "requestAdding",
    "tslib_1.__awaiter",
    "createTagModel",
    "catch",
    "resetItems",
    "setLoadingState",
    "pipe",
    "first",
    "subscribe",
    "populateItems",
    "onItemClicked",
    "onHide",
    "KEEP_OPEN",
    "onTextChange",
    "asObservable",
    "debounceTime",
    "updatePosition",
    "inputForm",
    "menu",
    "menuState",
    "dropdownState",
    "selectedItem",
    "scrollListener",
    "onWindowBlur",
    "formValue",
    "display",
    "dupesAllowed",
    "autocompleteItems",
    "hasValue",
    "tags",
    "some",
    "model",
    "slice",
    "isLoading",
    "Injector",
    "Ng2Dropdown",
    "templates",
    "ContentChildren",
    "TemplateRef",
    "HostListener",
    "TagRipple",
    "animations",
    "trigger",
    "style",
    "width",
    "opacity",
    "transition",
    "animate",
    "keyframes",
    "borderRadius",
    "KeyboardEvent",
    "MouseEvent",
    "navigator",
    "window",
    "userAgent",
    "vendor",
    "isChrome",
    "test",
    "TagComponent",
    "element",
    "renderer",
    "cdRef",
    "onSelect",
    "onRemove",
    "onTagEdited",
    "editing",
    "rippleState",
    "select",
    "readonly",
    "stopPropagation",
    "remove",
    "move",
    "moving",
    "keydown",
    "keyCode",
    "disableEditMode",
    "blink",
    "classList",
    "add",
    "setTimeout",
    "toggleEditMode",
    "activateEditMode",
    "onBlurred",
    "innerText",
    "getDisplayValue",
    "hasRipple",
    "getContentEditableText",
    "storeNewValue",
    "detectChanges",
    "setContentEditableText",
    "isDeleteIconVisible",
    "getContentEditable",
    "canAddTag",
    "querySelector",
    "ElementRef",
    "Renderer2",
    "ChangeDetectorRef",
    "HostBinding",
    "CUSTOM_ACCESSOR",
    "DragEvent",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "multi",
    "_super",
    "dragProvider",
    "onAdd",
    "onPaste",
    "onValidationError",
    "constants.KEYDOWN",
    "constants.KEYUP",
    "inputTextValue",
    "errors",
    "appendTag",
    "arguments",
    "concat",
    "__spread",
    "createTag",
    "val",
    "isTagValid",
    "fromAutocomplete",
    "dupe",
    "findDupe",
    "find",
    "isFromAutocomplete",
    "assertions",
    "onPasteCallback",
    "isIE",
    "Boolean",
    "clipboardData",
    "getText",
    "requests",
    "split",
    "setInputValue",
    "resetInput",
    "all",
    "__",
    "constructor",
    "create",
    "tslib_1.__extends",
    "ngAfterViewInit",
    "setUpKeypressListeners",
    "setupSeparatorKeysListener",
    "setUpInputKeydownListeners",
    "observers",
    "setUpTextChangeSubscriber",
    "setUpOnBlurSubscriber",
    "setUpOnPasteListener",
    "statusChanges$",
    "statusChanges",
    "status",
    "isProgressBarVisible$",
    "console",
    "warn",
    "setAnimationMetadata",
    "subscribeFn",
    "removeItem",
    "addItem",
    "selectItem",
    "selectedTag",
    "fireEvents",
    "eventName",
    "forEach",
    "listener",
    "handleKeydown",
    "which",
    "shiftKey",
    "constants.KEY_PRESS_ACTIONS",
    "constants.ACTIONS_KEYS",
    "moveToTag",
    "constants.PREV",
    "constants.NEXT",
    "isFirstTag",
    "isLastTag",
    "onFormSubmit",
    "emitEvent",
    "getControl",
    "applyFocus",
    "displayAutocomplete",
    "hasCustomTemplate",
    "menuTemplate",
    "onDragStarted",
    "zone",
    "onDragOver",
    "isDropping",
    "isReceiver",
    "onTagBlurred",
    "changedElement",
    "trackBy",
    "updateEditedTag",
    "direction",
    "isLast",
    "isFirst",
    "getTagIndex",
    "getTagAtIndex",
    "last",
    "toArray",
    "findIndex",
    "reset",
    "appendItem",
    "statusUpdate",
    "useSeparatorKeys",
    "hasKeyCode",
    "hasKey",
    "isIMEProcessing",
    "valueChanges",
    "id",
    "animationMetadata",
    "params",
    "providers",
    "ContentChild",
    "descendants",
    "ViewChildren",
    "tabindexAttr",
    "DeleteIconComponent",
    "optionsProvider",
    "TagInputModule",
    "withDefaults",
    "NgModule",
    "imports",
    "CommonModule",
    "ReactiveFormsModule",
    "FormsModule",
    "Ng2DropdownModule",
    "declarations",
    "exports",
    "COMPOSITION_BUFFER_MODE",
    "useValue"
  ],
  "mappings": "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"
}
